{"_id":{"$oid":"5d0df61c5c11161108068924"},"pid":"0","atname":"","state":"1","title":"22我是标题","description":"我是文章简介","keywords":"我是关键字","rawText":"我是原始数据","renderText":"我是html渲染数据","lock":"1","createTime":"","createId":{"$numberInt":"2"},"updateTime":""}
{"_id":{"$oid":"5d0df6245c11161108068925"},"pid":"0","atname":"","state":"1","title":"33我是标题","description":"我是文章简介","keywords":"我是关键字","rawText":"我是原始数据","renderText":"我是html渲染数据","lock":"0","createTime":"","createId":{"$numberInt":"3"},"updateTime":""}
{"_id":{"$oid":"5d0df7a4f5aa5343b895c9dd"},"pid":"5d01a5fc52226d06805fa01e","atname":"图解HTTP","title":"http的传输原理","state":"1","description":"客户端和服务如何传输的？","keywords":[],"rawText":"#### 图解http第一张\n关于如何进行服务端与客户端的传输，概念：http,html,ip,port","renderText":"<h4><a id=\"http_0\"></a>图解http第一张</h4>\n<p>关于如何进行服务端与客户端的传输，概念：http,html,ip,port</p>\n","lock":"1","createTime":{"$numberLong":"1561194878129"},"createId":{"$numberInt":"4"},"updateTime":""}
{"_id":{"$oid":"5d0dfc516fc92e4068996ff7"},"pid":"5d01a5fc52226d06805fa01e","atname":"图解HTTP","title":"測試標題2","state":"1","description":"测试摘要我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划","keywords":[],"rawText":"#### 测试内容\n我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发","renderText":"<h4><a id=\"_0\"></a>测试内容</h4>\n<p>我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发我是策划四内容啊发发</p>\n","lock":"0","createId":{"$numberInt":"6"},"updateTime":"","createTime":"2019-06-22"}
{"_id":{"$oid":"5d0e1ac864a1c01e605bff46"},"pid":"5d01a5fc52226d06805fa01e","atname":"图解HTTP","title":"aa","state":"1","description":"dd","keywords":[],"rawText":"#### ","renderText":"<h4><a id=\"_0\"></a></h4>\n","lock":"1","createId":{"$numberInt":"7"},"updateTime":"","createTime":"2019-06-22"}
{"_id":{"$oid":"5d0e1be1946529439404fac8"},"pid":"5d01a5fc52226d06805fa01e","atname":"图解HTTP","title":"11","state":"1","description":"111","keywords":[],"rawText":"#### wo si and node\ndadf\nadfa","renderText":"<h4><a id=\"wo_si_and_node_0\"></a>wo si and node</h4>\n<p>dadf<br />\nadfa</p>\n","lock":"1","tags":["node","android"],"createId":{"$numberInt":"8"},"updateTime":"","createTime":"2019-06-22"}
{"_id":{"$oid":"5d0e3e5bb24b3a1c744d439b"},"pid":"5d025c56fe135b3c80287146","atname":"aaa","title":"人生长河","state":"0","description":"人生的长河我把酒当歌","keywords":[],"rawText":"#### 人生长河\n人生的长河我把酒当歌，血里流淌着，**长江和黄河**\n活动在冒险，我流淌在心间\n```js\nthis.$http.post(this.ADD_URL,{\n          pid: this.pid,\n          title: this.title,\n          state: type,\n          description: this.description,\n          keywords: this.keywords,\n          rawText: this.rawText,\n          renderText: this.renderText,\n          createTime: this.createTime,\n          tags: this.dynamicTags\n        }).then(response => {\n          if (response.body.success) {\n            notifyTool.successTips(this,'成功',response.body.msg);\n            this.$router.push({path:'/manager/article'});\n          } else {\n            notifyTool.errorTips(this,'失败',response.body.msg);\n          }\n        },response => {\n          notifyTool.errorTips(this,'添加失败','信息提交失败');\n        });\n\n\n```\n","renderText":"<h4><a id=\"_0\"></a>人生长河</h4>\n<p>人生的长河我把酒当歌，血里流淌着，<strong>长江和黄河</strong><br />\n活动在冒险，我流淌在心间</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.$http.post(<span class=\"hljs-keyword\">this</span>.ADD_URL,{\n          <span class=\"hljs-attr\">pid</span>: <span class=\"hljs-keyword\">this</span>.pid,\n          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-keyword\">this</span>.title,\n          <span class=\"hljs-attr\">state</span>: type,\n          <span class=\"hljs-attr\">description</span>: <span class=\"hljs-keyword\">this</span>.description,\n          <span class=\"hljs-attr\">keywords</span>: <span class=\"hljs-keyword\">this</span>.keywords,\n          <span class=\"hljs-attr\">rawText</span>: <span class=\"hljs-keyword\">this</span>.rawText,\n          <span class=\"hljs-attr\">renderText</span>: <span class=\"hljs-keyword\">this</span>.renderText,\n          <span class=\"hljs-attr\">createTime</span>: <span class=\"hljs-keyword\">this</span>.createTime,\n          <span class=\"hljs-attr\">tags</span>: <span class=\"hljs-keyword\">this</span>.dynamicTags\n        }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">response</span> =&gt;</span> {\n          <span class=\"hljs-keyword\">if</span> (response.body.success) {\n            notifyTool.successTips(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">'成功'</span>,response.body.msg);\n            <span class=\"hljs-keyword\">this</span>.$router.push({<span class=\"hljs-attr\">path</span>:<span class=\"hljs-string\">'/manager/article'</span>});\n          } <span class=\"hljs-keyword\">else</span> {\n            notifyTool.errorTips(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">'失败'</span>,response.body.msg);\n          }\n        },response =&gt; {\n          notifyTool.errorTips(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">'添加失败'</span>,<span class=\"hljs-string\">'信息提交失败'</span>);\n        });\n\n\n</code></div></pre>\n","lock":"0","tags":["感叹"],"createId":{"$numberInt":"9"},"updateTime":"2019-06-22 22:47","createTime":"2019-06-22"}
{"_id":{"$oid":"5d0f2e6e3be96d2e345bbfcc"},"pid":"5d0f47fa8e3cc525f4c4e0a7","atname":"MongoDB","title":"mongo数据库操作（3）","state":"1","description":"连接加密的数据库","keywords":[],"rawText":"\n#### mongodb学习\n##### 连接加密的数据库\n方式1：\n```python\n    mongo admin -u root -p123456\n```\n\n方式2：\n```java\n    mongo\n    use admin\n    db.auth('root ','p123456')\n```\n\n\n    \n\n#### nodejs操作mongodb数据库\n```js\nnpm install mongodb --save-dev\nvar MongoClient = require('mongodb').MongoClient;\n创建数据库地址\nvar url = 'mongodb://localhost:27017/test'; //这是2.版本的mongodb方式\nvar url = 'mongodb://localhost:27017'// 3.几版本\n\n2.几版本，直接连接到数据库\nMongoClient.connect(url, function(err, db) {\n\t\t\n});\n\n3.几版本需要打开具体的数据库，不是通过url写死\nMongoClient.connect(DBurl, function (err, client) {\nlet db = client.db('people');\n        const cursor = db.collection('student').find({});\n}\n```\n\n##### mongo数据库库的导入导出\n导出：\n```js\nmongodump -h dbhost -d dbname -o dbdirectory\n```\n\n\n导入：\n```js\nmongorestore -h dbhost -d dbname path\n```\n\n例子：\n\n```js\n//吧koa数据库导出到桌面\nmongodump -h 127.0.0.1 -d koa -o C:\\Users\\coold\\Desktop\\temp\\\n//需用户认证时：\nmongodump -u username-p pwd--port 27017 --authenticationDatabase admin -d funblog -o C:\\\nUsers\\caif3\\Desktop\\koa\n\n//把桌面koa数据库内容导入到名为newkoa的数据库\nmongorestore -h 127.0.0.1 -d newkoa C:\\Users\\coold\\Desktop\\temp\\koa\\\n//需要用户认证：\nmongorestore -u username-p pwd--port 27017 --authenticationDatabase admin -d funblog E:\\nodeProjects\\ifangblog-node\\funblog\n```\n\n\n","renderText":"<h4><a id=\"mongodb_1\"></a>mongodb学习</h4>\n<h5><a id=\"_2\"></a>连接加密的数据库</h5>\n<p>方式1：</p>\n<pre><div class=\"hljs\"><code class=\"lang-python\">    mongo admin -u root -p123456\n</code></div></pre>\n<p>方式2：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">    mongo\n    use admin\n    db.auth(<span class=\"hljs-string\">'root '</span>,<span class=\"hljs-string\">'p123456'</span>)\n</code></div></pre>\n<h4><a id=\"nodejsmongodb_18\"></a>nodejs操作mongodb数据库</h4>\n<pre><div class=\"hljs\"><code class=\"lang-js\">npm install mongodb --save-dev\n<span class=\"hljs-keyword\">var</span> MongoClient = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongodb'</span>).MongoClient;\n创建数据库地址\n<span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'mongodb://localhost:27017/test'</span>; <span class=\"hljs-comment\">//这是2.版本的mongodb方式</span>\n<span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'mongodb://localhost:27017'</span><span class=\"hljs-comment\">// 3.几版本</span>\n\n<span class=\"hljs-number\">2.</span>几版本，直接连接到数据库\nMongoClient.connect(url, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, db</span>) </span>{\n\t\t\n});\n\n<span class=\"hljs-number\">3.</span>几版本需要打开具体的数据库，不是通过url写死\nMongoClient.connect(DBurl, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, client</span>) </span>{\n<span class=\"hljs-keyword\">let</span> db = client.db(<span class=\"hljs-string\">'people'</span>);\n        <span class=\"hljs-keyword\">const</span> cursor = db.collection(<span class=\"hljs-string\">'student'</span>).find({});\n}\n</code></div></pre>\n<h5><a id=\"mongo_38\"></a>mongo数据库库的导入导出</h5>\n<p>导出：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">mongodump -h dbhost -d dbname -o dbdirectory\n</code></div></pre>\n<p>导入：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">mongorestore -h dbhost -d dbname path\n</code></div></pre>\n<p>例子：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//吧koa数据库导出到桌面</span>\nmongodump -h <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> -d koa -o C:\\Users\\coold\\Desktop\\temp\\\n<span class=\"hljs-comment\">//需用户认证时：</span>\nmongodump -u username-p pwd--port <span class=\"hljs-number\">27017</span> --authenticationDatabase admin -d funblog -o C:\\\nUsers\\caif3\\Desktop\\koa\n\n<span class=\"hljs-comment\">//把桌面koa数据库内容导入到名为newkoa的数据库</span>\nmongorestore -h <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span> -d newkoa C:\\Users\\coold\\Desktop\\temp\\koa\\\n<span class=\"hljs-comment\">//需要用户认证：</span>\nmongorestore -u username-p pwd--port <span class=\"hljs-number\">27017</span> --authenticationDatabase admin -d funblog E:\\nodeProjects\\ifangblog-node\\funblog\n</code></div></pre>\n","lock":"0","tags":[{"name":"Mongo","icon":"localhost:3005\\tagIcon\\1561387325454.png"},{"name":"Node","icon":"http://localhost:3005\\tagIcon\\1560871990779.png"}],"createId":{"$numberInt":"10"},"updateTime":"2019-06-25 00:01","createTime":"2019-06-23"}
{"_id":{"$oid":"5d0f41808e3cc525f4c4e0a5"},"pid":"5d0f47fa8e3cc525f4c4e0a7","atname":"MongoDB","title":"nodejs中使用mongodb（1）","state":"1","description":"MongoDB 是一个介于关系数据库和非关系数据库之间的产品， 是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。","keywords":[],"rawText":"## nodejs操作mongodb数据库\n  MongoDB 是一个介于关系数据库和非关系数据库之间的产品， 是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。\n\n### 准备工作\n\n- 下载安装mongo：[++mongo官网下载++](https://www.mongodb.com/download-center/community)\n- 配置环境变量：将mongodb安装路径下的bin目录配置到环境变量。\n\n### 数据库操作\n第一步：启动mongodb 开启数据库服务:\n\n```js\nmongod --dbpath D:\\mongodb\n```\n\n第二步：mongo 连接数据库 ip 地址:端口号\n```js\nmongo 127.0.0.1:27017\n```\n第三部：使用数据库、创建数据库\n```js\nuse toutiaonews\ndb.news.insert({\"title\":\"头条新闻02\",\"time\":\"2\"})\n//创建数据库(往数据库建一张表插入一条数据则自动创建了。)\n```\n\n### 具体数据库表操作\n显示当前数据集合(表)：\n```js\nshow collections\n```\n删除数据库，删除当前所在的数据库:\n```js\ndb.dropDatabase();\n```\n查询所有记录:\n```js\ndb.userInfo.find();\n```\n去掉某列重复数据:\n```js\ndb.news.distinct('title') 返回title这一列，不重复。\n```\n#### 常用查询操作\n查询time=3数据:\n```js\ndb.news.find({\"time\":\"3\"})\n```\n\n查询age> 3数据\n```js\ndb.userInfo.find({age: {$gt: 3}});\n```\n\n查询 age < 22 的记录\n```js\ndb.userInfo.find({age: {$lt: 22}});\n```\n查询 age >= 25 的记录\n```js\ndb.userInfo.find({age: {$gte: 25}});\n```\n查询 age <= 25 的记录\n```js\ndb.userInfo.find({age: {$lte: 25}})\n```\n\n查询 age >= 23 并且 age <= 26 注意书写格式\n```js\ndb.userInfo.find({age: {$gte: 23, $lte: 26}});\n```\n\n查询 name 中包含 mongo 的数据 模糊查询用于搜索\n```js\ndb.userInfo.find({name: /mongo/});\n```\n\n查询 name 中以 mongo 开头的\n```js\ndb.userInfo.find({name: /^mongo/});\n```\n\n查询指定列 name 、age 数据\n```js\ndb.userInfo.find({}, {name: 1, age: 1});\n```\n\n查询指定列 name 、age 数据, age > 25\n```js\ndb.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});\n```\n\n按照年龄排序 1 升序 -1 降\n```js\n升序：db.userInfo.find().sort({age: 1});\n降序：db.userInfo.find().sort({age: -1});\n```\n\n查询前 5 条数据\n```js\ndb.userInfo.find().limit(5);\n```\n\n查询 10 条以后的数据\n```js\ndb.userInfo.find().skip(10);\n```\n\n查询在 5-10 之间的数据\n```js\ndb.userInfo.find().limit(10).skip(5); \n//可用于分页，limit 是 pageSize，skip 是第几页*pageSize\n```\nor 与 查询\n```js\ndb.userInfo.find({$or: [{age: 22}, {age: 25}]});\n```\n\nfindOne 查询第一条数据\n```js\ndb.userInfo.findOne();\n```\n\n\n查询某个结果集的记录条数 统计数量\n```js\ndb.userInfo.find({age: {$gte: 25}}).count(); \n相当于：\nselect count(*) from userInfo where age >= 25; \n```\n\n如果要返回限制之后的记录数量，要使用 count(true)或者 count(非 0)\n```js\ndb.users.find().skip(10).limit(5).count(true);\n```\n\n\n###### 修改数据\n更新数据：\n```js\ndb.student.update({\"name\":\"小明\"},{$set:{\"age\":16}})\n```\n\n删除数据\n```js\ndb.collectionsNames.remove( { \"borough\": \"Manhattan\" } )\ndb.restaurants.remove( { \"borough\": \"Queens\" }, { justOne: true } ) 只删除匹配的第一条\n```\n\n\n\n","renderText":"<h2><a id=\"nodejsmongodb_0\"></a>nodejs操作mongodb数据库</h2>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品， 是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似 json 的 bson 格式，因此可以存储比较复杂的数据类型。</p>\n<h3><a id=\"_3\"></a>准备工作</h3>\n<ul>\n<li>下载安装mongo：<a href=\"https://www.mongodb.com/download-center/community\" target=\"_blank\"><ins>mongo官网下载</ins></a></li>\n<li>配置环境变量：将mongodb安装路径下的bin目录配置到环境变量。</li>\n</ul>\n<h3><a id=\"_8\"></a>数据库操作</h3>\n<p>第一步：启动mongodb 开启数据库服务:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">mongod --dbpath D:\\mongodb\n</code></div></pre>\n<p>第二步：mongo 连接数据库 ip 地址:端口号</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">mongo <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span>:<span class=\"hljs-number\">27017</span>\n</code></div></pre>\n<p>第三部：使用数据库、创建数据库</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">use toutiaonews\ndb.news.insert({<span class=\"hljs-string\">\"title\"</span>:<span class=\"hljs-string\">\"头条新闻02\"</span>,<span class=\"hljs-string\">\"time\"</span>:<span class=\"hljs-string\">\"2\"</span>})\n<span class=\"hljs-comment\">//创建数据库(往数据库建一张表插入一条数据则自动创建了。)</span>\n</code></div></pre>\n<h3><a id=\"_26\"></a>具体数据库表操作</h3>\n<p>显示当前数据集合(表)：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">show collections\n</code></div></pre>\n<p>删除数据库，删除当前所在的数据库:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.dropDatabase();\n</code></div></pre>\n<p>查询所有记录:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find();\n</code></div></pre>\n<p>去掉某列重复数据:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.news.distinct(<span class=\"hljs-string\">'title'</span>) 返回title这一列，不重复。\n</code></div></pre>\n<h4><a id=\"_43\"></a>常用查询操作</h4>\n<p>查询time=3数据:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.news.find({<span class=\"hljs-string\">\"time\"</span>:<span class=\"hljs-string\">\"3\"</span>})\n</code></div></pre>\n<p>查询age&gt; 3数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$gt</span>: <span class=\"hljs-number\">3</span>}});\n</code></div></pre>\n<p>查询 age &lt; 22 的记录</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$lt</span>: <span class=\"hljs-number\">22</span>}});\n</code></div></pre>\n<p>查询 age &gt;= 25 的记录</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$gte</span>: <span class=\"hljs-number\">25</span>}});\n</code></div></pre>\n<p>查询 age &lt;= 25 的记录</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$lte</span>: <span class=\"hljs-number\">25</span>}})\n</code></div></pre>\n<p>查询 age &gt;= 23 并且 age &lt;= 26 注意书写格式</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$gte</span>: <span class=\"hljs-number\">23</span>, <span class=\"hljs-attr\">$lte</span>: <span class=\"hljs-number\">26</span>}});\n</code></div></pre>\n<p>查询 name 中包含 mongo 的数据 模糊查询用于搜索</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-regexp\">/mongo/</span>});\n</code></div></pre>\n<p>查询 name 中以 mongo 开头的</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-regexp\">/^mongo/</span>});\n</code></div></pre>\n<p>查询指定列 name 、age 数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>});\n</code></div></pre>\n<p>查询指定列 name 、age 数据, age &gt; 25</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$gt</span>: <span class=\"hljs-number\">25</span>}}, {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>});\n</code></div></pre>\n<p>按照年龄排序 1 升序 -1 降</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">升序：db.userInfo.find().sort({<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>});\n降序：db.userInfo.find().sort({<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">-1</span>});\n</code></div></pre>\n<p>查询前 5 条数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find().limit(<span class=\"hljs-number\">5</span>);\n</code></div></pre>\n<p>查询 10 条以后的数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find().skip(<span class=\"hljs-number\">10</span>);\n</code></div></pre>\n<p>查询在 5-10 之间的数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find().limit(<span class=\"hljs-number\">10</span>).skip(<span class=\"hljs-number\">5</span>); \n<span class=\"hljs-comment\">//可用于分页，limit 是 pageSize，skip 是第几页*pageSize</span>\n</code></div></pre>\n<p>or 与 查询</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">$or</span>: [{<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">22</span>}, {<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>}]});\n</code></div></pre>\n<p>findOne 查询第一条数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.findOne();\n</code></div></pre>\n<p>查询某个结果集的记录条数 统计数量</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.userInfo.find({<span class=\"hljs-attr\">age</span>: {<span class=\"hljs-attr\">$gte</span>: <span class=\"hljs-number\">25</span>}}).count(); \n相当于：\nselect count(*) <span class=\"hljs-keyword\">from</span> userInfo where age &gt;= <span class=\"hljs-number\">25</span>; \n</code></div></pre>\n<p>如果要返回限制之后的记录数量，要使用 count(true)或者 count(非 0)</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.users.find().skip(<span class=\"hljs-number\">10</span>).limit(<span class=\"hljs-number\">5</span>).count(<span class=\"hljs-literal\">true</span>);\n</code></div></pre>\n<h6><a id=\"_137\"></a>修改数据</h6>\n<p>更新数据：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.student.update({<span class=\"hljs-string\">\"name\"</span>:<span class=\"hljs-string\">\"小明\"</span>},{<span class=\"hljs-attr\">$set</span>:{<span class=\"hljs-string\">\"age\"</span>:<span class=\"hljs-number\">16</span>}})\n</code></div></pre>\n<p>删除数据</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.collectionsNames.remove( { <span class=\"hljs-string\">\"borough\"</span>: <span class=\"hljs-string\">\"Manhattan\"</span> } )\ndb.restaurants.remove( { <span class=\"hljs-string\">\"borough\"</span>: <span class=\"hljs-string\">\"Queens\"</span> }, { <span class=\"hljs-attr\">justOne</span>: <span class=\"hljs-literal\">true</span> } ) 只删除匹配的第一条\n</code></div></pre>\n","lock":"0","tags":[{"name":"Mongo","icon":"localhost:3005\\tagIcon\\1561387325454.png"},{"name":"Node","icon":"http://localhost:3005\\tagIcon\\1560871990779.png"}],"createId":{"$numberInt":"11"},"updateTime":"2019-06-25 00:01","createTime":"2019-06-23"}
{"_id":{"$oid":"5d0f49b08e3cc525f4c4e0a8"},"pid":"5d0f47fa8e3cc525f4c4e0a7","atname":"MongoDB","title":"nodejs使用MongoDB（2）","state":"1","description":"索引是对数据库表中一列或多列的值进行排序的一种结构，可以让我们查询数据库变得更快","keywords":[],"rawText":"## 索引\n索引是对数据库表中一列或多列的值进行排序的一种结构，可以让我们查询数据库变得更快\n创建索引\n```js\ndb.user.ensureIndex({\"username\":1})\n```\n\n创建复合索引\n```js\ndb.user.ensureIndex({\"username\":1, \"age\":-1})\n```\n\n创建唯一索引：\n```js\ndb.user.ensureIndex({\"userid\":1},{\"unique\":true})\n```\n如果再次插入 userid 重复的文档时， MongoDB 将报错，以提示插入重复键\n\n获取当前集合的索引：\n```js\ndb.user.getIndexes()\n```\n\n\n删除索引：\n```js\ndb.user.dropIndex({\"username\":1})\n```\n\nexplain查询具体执行时间：\n```js\ndb.tablename.find().explain( \"executionStats\" )\n```\n关注输出的如下数值： explain.executionStats.executionTimeMillis 即是此条查询语句耗时","renderText":"<h2><a id=\"_0\"></a>索引</h2>\n<p>索引是对数据库表中一列或多列的值进行排序的一种结构，可以让我们查询数据库变得更快<br />\n创建索引</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.user.ensureIndex({<span class=\"hljs-string\">\"username\"</span>:<span class=\"hljs-number\">1</span>})\n</code></div></pre>\n<p>创建复合索引</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.user.ensureIndex({<span class=\"hljs-string\">\"username\"</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">\"age\"</span>:<span class=\"hljs-number\">-1</span>})\n</code></div></pre>\n<p>创建唯一索引：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.user.ensureIndex({<span class=\"hljs-string\">\"userid\"</span>:<span class=\"hljs-number\">1</span>},{<span class=\"hljs-string\">\"unique\"</span>:<span class=\"hljs-literal\">true</span>})\n</code></div></pre>\n<p>如果再次插入 userid 重复的文档时， MongoDB 将报错，以提示插入重复键</p>\n<p>获取当前集合的索引：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.user.getIndexes()\n</code></div></pre>\n<p>删除索引：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.user.dropIndex({<span class=\"hljs-string\">\"username\"</span>:<span class=\"hljs-number\">1</span>})\n</code></div></pre>\n<p>explain查询具体执行时间：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">db.tablename.find().explain( <span class=\"hljs-string\">\"executionStats\"</span> )\n</code></div></pre>\n<p>关注输出的如下数值： explain.executionStats.executionTimeMillis 即是此条查询语句耗时</p>\n","lock":"0","tags":[{"name":"Mongo","icon":"localhost:3005\\tagIcon\\1561387325454.png"}],"createId":{"$numberInt":"12"},"updateTime":"2019-06-25 00:01","createTime":"2019-06-23"}
{"_id":{"$oid":"5d0f4b3b8e3cc525f4c4e0aa"},"pid":"5d0f4a4e8e3cc525f4c4e0a9","atname":"NPM","title":"轻量级web服务搭建","state":"1","description":"http-server和server的使用，搭建轻量级web服务搭建。方便本地h5页面测试","keywords":[],"rawText":"## 轻量级web服务搭建\n\n作用：方便测试本地html代码\n\n第一步：安装http-server \n第二步：在项目目录下执行：\n```js\nhttp-server -p 8083 -o\n```\n\n\n对于单页面vue项目，上面方法执行，可能因为路径等配置，打开提示err_redirect, \n官方建议用serve来做静态web服务器\n```js\nnpm install -g serve\nserve -s dist\n```\n\n","renderText":"<h2><a id=\"web_0\"></a>轻量级web服务搭建</h2>\n<p>作用：方便测试本地html代码</p>\n<p>第一步：安装http-server<br />\n第二步：在项目目录下执行：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">http-server -p <span class=\"hljs-number\">8083</span> -o\n</code></div></pre>\n<p>对于单页面vue项目，上面方法执行，可能因为路径等配置，打开提示err_redirect,<br />\n官方建议用serve来做静态web服务器</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">npm install -g serve\nserve -s dist\n</code></div></pre>\n","lock":"0","tags":[{"name":"NPM","icon":""}],"createId":{"$numberInt":"13"},"updateTime":"2019-06-25 00:00","createTime":"2019-06-03"}
{"_id":{"$oid":"5d0f4e2a8e3cc525f4c4e0ac"},"pid":"5d0f4c518e3cc525f4c4e0ab","atname":"JavaScript","title":"JavaScript基本用法","state":"1","description":"HTML中的脚本必须放在<script></script>之间\n脚本可以放在head或body部分中\n可以使用外部文件，在script标签中用src引用<script src=\"myScript.js\"></script>","keywords":[],"rawText":"\n## JavaScript基本用法\n[参照runnoob](http://www.runoob.com/js/js-intro.html)\n\n### 使用方式\n- HTML中的脚本必须放在`<script></script>`之间\n- 脚本可以放在head或body部分中\n- 可以使用外部文件，在script标签中用src引用`<script src=\"myScript.js\"></script>`\n\n## javaScript输出\n```js\n- window.alert()弹框提示\n- console.log()控制台输出\n- document.write()写内容到html文档中\n- document.getElementById()通过id获取元素\n- innerHtml修改元素内容\n```\n\n##javaScript字面量和变量\n```js\n- Object字面量：{name:\"Cai\",channelId:\"dblw\",sign:\"2412adfe\"}\n- Function字面量：Function fen2yuan(a){return a/100}\n- Number字面量：3.14,1000,123e5\n- String字面量：\"Johon\",'caifang'\n- 表达式字面量：3+5    5*10\n- Array字面量：[3,4,2,1]   ['a','c','s']\n- Boolean字面量：true,false\n- Null:null\n- Undefined:undefined\n- 变量：统一用关键字var\n- `var name=\"wovip\",channelId=\"123\";`一行定义多个变量,或者有换行，跨行定义多个变量也是可行。\n- 错误`var name1,name2,name=\"wocard\";`不可这样赋值给多个变量，name1和name2会是undefined\n- typeof 返回变量的数据类型\n\n变量一般先申明，后使用。\n```\n\n## 注释&对象说明\n```js\n- 注释，同java ,使用`// 或者 /* */`\n- 对象的理解同java\n- 前面提到对象的创建如`var requestParams = {timestamp:\"201802221212\",sign:\"wteeade123f\",channelId:\"tencent\",sourceType:0}`\n- 对象中可以创建方法`var requestParams = {timestamp:\"201802221212\",sign:\"wteeade123f\",\nchannelId:\"tencent\",sourceType:0,getChannelId:function(){return this.channelId}`\n- 对象属性的调用方式：\n\t- requestparams.channelId;\n\t- requestparams[\"sourceType\"];\n\t- requestparams.getChannelId();\n```\n\n\n## 函数\n```js\n\n- function是关键字\n- `function requestData(requestparams) {...}`\n```\n\n## 未申明的变量有什么后果\n```js\n- 常规定义变量是var timer = \"\"; \n- 如果写成 timer2 = \"\"; 那么timer成为了了window的一个属性，区别是这种方式timer2 可以 通过delete删除\n```\n\n##   作用域\n- 变量作用域同java,全局变量，局部变量\n- 全局变量是window对象，在页面关闭后销毁\n\n## 事件\n```js\n- 浏览器行为事件如：onload\n- 用户行为事件如：onclick,onkeydown,onmouseover\n```\n\n\n## 运算符\n```js\n- 注意`==和===`的区别，前者，不严格比较，后者严格比较\n- 如x=5; 比较`x==5或者x==\"5\"`都为true,而`x===\"5\"则为false,x===5为true`\n```\n\n## **正则表达式**\n```js\n- i\n- g\n- m\n- [abc]\n- [0-9]\n- (x|y)\n- \\d\n- \\s\n- \\b\n- \\uxxxx\n- n+\n- n*\n- n?\n- test()方法\n- exec()方法\n```\n\n## JSON\n```js\n- JSON.parse() 用于将一个JSON字符串转换为javascript对象\n- JSON.stringify()用于将JavaScript值转换为JSON字符串\n```\n\n## 函数\n```js\nES6新增了箭头函数：\n\t- 参数1, 参数2, …, 参数N) => { 函数声明 }\n\t- (参数1, 参数2, …, 参数N) => 表达式(单一)\n\t- `const x = (x, y) => x * y;`\n```\n","renderText":"<h2><a id=\"JavaScript_1\"></a>JavaScript基本用法</h2>\n<p><a href=\"http://www.runoob.com/js/js-intro.html\" target=\"_blank\">参照runnoob</a></p>\n<h3><a id=\"_4\"></a>使用方式</h3>\n<ul>\n<li>HTML中的脚本必须放在<code>&lt;script&gt;&lt;/script&gt;</code>之间</li>\n<li>脚本可以放在head或body部分中</li>\n<li>可以使用外部文件，在script标签中用src引用<code>&lt;script src=&quot;myScript.js&quot;&gt;&lt;/script&gt;</code></li>\n</ul>\n<h2><a id=\"javaScript_9\"></a>javaScript输出</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- <span class=\"hljs-built_in\">window</span>.alert()弹框提示\n- <span class=\"hljs-built_in\">console</span>.log()控制台输出\n- <span class=\"hljs-built_in\">document</span>.write()写内容到html文档中\n- <span class=\"hljs-built_in\">document</span>.getElementById()通过id获取元素\n- innerHtml修改元素内容\n</code></div></pre>\n<p>##javaScript字面量和变量</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- <span class=\"hljs-built_in\">Object</span>字面量：{<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\"Cai\"</span>,<span class=\"hljs-attr\">channelId</span>:<span class=\"hljs-string\">\"dblw\"</span>,<span class=\"hljs-attr\">sign</span>:<span class=\"hljs-string\">\"2412adfe\"</span>}\n- <span class=\"hljs-built_in\">Function</span>字面量：<span class=\"hljs-built_in\">Function</span> fen2yuan(a){<span class=\"hljs-keyword\">return</span> a/<span class=\"hljs-number\">100</span>}\n- <span class=\"hljs-built_in\">Number</span>字面量：<span class=\"hljs-number\">3.14</span>,<span class=\"hljs-number\">1000</span>,<span class=\"hljs-number\">123e5</span>\n- <span class=\"hljs-built_in\">String</span>字面量：<span class=\"hljs-string\">\"Johon\"</span>,<span class=\"hljs-string\">'caifang'</span>\n- 表达式字面量：<span class=\"hljs-number\">3</span>+<span class=\"hljs-number\">5</span>    <span class=\"hljs-number\">5</span>*<span class=\"hljs-number\">10</span>\n- <span class=\"hljs-built_in\">Array</span>字面量：[<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>]   [<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'c'</span>,<span class=\"hljs-string\">'s'</span>]\n- <span class=\"hljs-built_in\">Boolean</span>字面量：<span class=\"hljs-literal\">true</span>,<span class=\"hljs-literal\">false</span>\n- Null:<span class=\"hljs-literal\">null</span>\n- Undefined:<span class=\"hljs-literal\">undefined</span>\n- 变量：统一用关键字<span class=\"hljs-keyword\">var</span>\n- <span class=\"hljs-string\">`var name=\"wovip\",channelId=\"123\";`</span>一行定义多个变量,或者有换行，跨行定义多个变量也是可行。\n- 错误<span class=\"hljs-string\">`var name1,name2,name=\"wocard\";`</span>不可这样赋值给多个变量，name1和name2会是<span class=\"hljs-literal\">undefined</span>\n- <span class=\"hljs-keyword\">typeof</span> 返回变量的数据类型\n\n变量一般先申明，后使用。\n</code></div></pre>\n<h2><a id=\"_37\"></a>注释&amp;对象说明</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- 注释，同java ,使用<span class=\"hljs-string\">`// 或者 /* */`</span>\n- 对象的理解同java\n- 前面提到对象的创建如<span class=\"hljs-string\">`var requestParams = {timestamp:\"201802221212\",sign:\"wteeade123f\",channelId:\"tencent\",sourceType:0}`</span>\n- 对象中可以创建方法<span class=\"hljs-string\">`var requestParams = {timestamp:\"201802221212\",sign:\"wteeade123f\",\nchannelId:\"tencent\",sourceType:0,getChannelId:function(){return this.channelId}`</span>\n- 对象属性的调用方式：\n\t- requestparams.channelId;\n\t- requestparams[<span class=\"hljs-string\">\"sourceType\"</span>];\n\t- requestparams.getChannelId();\n</code></div></pre>\n<h2><a id=\"_51\"></a>函数</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n- <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>是关键字\n- `<span class=\"hljs-title\">function</span> <span class=\"hljs-title\">requestData</span>(<span class=\"hljs-params\">requestparams</span>) </span>{...}<span class=\"hljs-string\">`\n</span></code></div></pre>\n<h2><a id=\"_58\"></a>未申明的变量有什么后果</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- 常规定义变量是<span class=\"hljs-keyword\">var</span> timer = <span class=\"hljs-string\">\"\"</span>; \n- 如果写成 timer2 = <span class=\"hljs-string\">\"\"</span>; 那么timer成为了了<span class=\"hljs-built_in\">window</span>的一个属性，区别是这种方式timer2 可以 通过<span class=\"hljs-keyword\">delete</span>删除\n</code></div></pre>\n<h2><a id=\"_64\"></a>作用域</h2>\n<ul>\n<li>变量作用域同java,全局变量，局部变量</li>\n<li>全局变量是window对象，在页面关闭后销毁</li>\n</ul>\n<h2><a id=\"_68\"></a>事件</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- 浏览器行为事件如：onload\n- 用户行为事件如：onclick,onkeydown,onmouseover\n</code></div></pre>\n<h2><a id=\"_75\"></a>运算符</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- 注意<span class=\"hljs-string\">`==和===`</span>的区别，前者，不严格比较，后者严格比较\n- 如x=<span class=\"hljs-number\">5</span>; 比较<span class=\"hljs-string\">`x==5或者x==\"5\"`</span>都为<span class=\"hljs-literal\">true</span>,而<span class=\"hljs-string\">`x===\"5\"则为false,x===5为true`</span>\n</code></div></pre>\n<h2><a id=\"_81\"></a><strong>正则表达式</strong></h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- i\n- g\n- m\n- [abc]\n- [<span class=\"hljs-number\">0</span><span class=\"hljs-number\">-9</span>]\n- (x|y)\n- \\d\n- \\s\n- \\b\n- \\uxxxx\n- n+\n- n*\n- n?\n- test()方法\n- exec()方法\n</code></div></pre>\n<h2><a id=\"JSON_100\"></a>JSON</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">- <span class=\"hljs-built_in\">JSON</span>.parse() 用于将一个<span class=\"hljs-built_in\">JSON</span>字符串转换为javascript对象\n- <span class=\"hljs-built_in\">JSON</span>.stringify()用于将JavaScript值转换为<span class=\"hljs-built_in\">JSON</span>字符串\n</code></div></pre>\n<h2><a id=\"_106\"></a>函数</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\">ES6新增了箭头函数：\n\t- 参数<span class=\"hljs-number\">1</span>, 参数<span class=\"hljs-number\">2</span>, …, 参数N) =&gt; { 函数声明 }\n\t- <span class=\"hljs-function\">(<span class=\"hljs-params\">参数<span class=\"hljs-number\">1</span>, 参数<span class=\"hljs-number\">2</span>, …, 参数N</span>) =&gt;</span> 表达式(单一)\n\t- <span class=\"hljs-string\">`const x = (x, y) =&gt; x * y;`</span>\n</code></div></pre>\n","lock":"0","tags":[{"name":"Js","icon":"localhost:3005\\tagIcon\\1561393351550.png"}],"createId":{"$numberInt":"14"},"updateTime":"2019-06-25 00:23","createTime":"2019-01-08"}
{"_id":{"$oid":"5d0f4f018e3cc525f4c4e0ad"},"pid":"5d0f4c518e3cc525f4c4e0ab","atname":"JavaScript","title":"js遍历dom文件","state":"1","description":"document.querySelectorAll和document.querySelector","keywords":[],"rawText":"## js遍历dom文件\n```js\nlet tipsdom = document.querySelector('.tips-list')\nlet tipsList = document.querySelectorAll(\".tips-list li\")\n```\n\n\n拿到dom对象之后可以设置事件，设置class等\n```js\ntipsList[i].onclick= function() {}\ntipsList[i].className = 'active'\n```\n### li.classname含义\n```js\n在写css属性时\nli classname {} 表示li下类名为classname的dom的属性\n\nli.classname{}表示类名为classname的li的属性\n```","renderText":"<h2><a id=\"jsdom_0\"></a>js遍历dom文件</h2>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">let</span> tipsdom = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.tips-list'</span>)\n<span class=\"hljs-keyword\">let</span> tipsList = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">\".tips-list li\"</span>)\n</code></div></pre>\n<p>拿到dom对象之后可以设置事件，设置class等</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">tipsList[i].onclick= <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\ntipsList[i].className = <span class=\"hljs-string\">'active'</span>\n</code></div></pre>\n<h3><a id=\"liclassname_12\"></a>li.classname含义</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">在写css属性时\nli classname {} 表示li下类名为classname的dom的属性\n\nli.classname{}表示类名为classname的li的属性\n</code></div></pre>\n","lock":"0","tags":[{"name":"Js","icon":"localhost:3005\\tagIcon\\1561393351550.png"}],"createId":{"$numberInt":"15"},"updateTime":"2019-06-25 00:22","createTime":"2019-01-12"}
{"_id":{"$oid":"5d0f500c8e3cc525f4c4e0ae"},"pid":"5d0f4c518e3cc525f4c4e0ab","atname":"JavaScript","title":"Js中写方法的几种方式","state":"1","description":"javascript全局方法、对象方法的书写","keywords":[],"rawText":"## 几种方法的写法\n### 全局方法：\n```js\nfunction getUrlParams(name) {\n    let reg = `(^|&)${name}=([^&]*)(&|$)`;\n    let r = window.location.search.substr(1).match(reg);\n    if (r != null) return unescape(r[2]);\n    return null;\n}\n```\n\n\n### 对象的方法\n```js\nlet data = {\n    mounted: function () {\n        console.log(`${id} mounted is running`);\n    }\n};\n```\n\n### es6 对象方法的简写\n```js\nlet data = {\n    mounted() {\n        console.log(`${id} mounted is running`);\n    }\n};\n```\n","renderText":"<h2><a id=\"_0\"></a>几种方法的写法</h2>\n<h3><a id=\"_1\"></a>全局方法：</h3>\n<pre><code class=\"lang-js\">function getUrlParams(name) {\n    let reg = `(^|&amp;)${name}=([^&amp;]*)(&amp;|$)`;\n    let r = window.location.search.substr(1).match(reg);\n    if (r != null) return unescape(r[2]);\n    return null;\n}\n</code></pre>\n<h3><a id=\"_12\"></a>对象的方法</h3>\n<pre><code class=\"lang-js\">let data = {\n    mounted: function () {\n        console.log(`${id} mounted is running`);\n    }\n};\n</code></pre>\n<h3><a id=\"es6__21\"></a>es6 对象方法的简写</h3>\n<pre><code class=\"lang-js\">let data = {\n    mounted() {\n        console.log(`${id} mounted is running`);\n    }\n};\n</code></pre>\n","lock":"0","tags":[{"name":"Js","icon":"localhost:3005\\tagIcon\\1561393351550.png"}],"createId":{"$numberInt":"16"},"updateTime":"2019-06-25 00:22","createTime":"2019-04-02"}
{"_id":{"$oid":"5d0f53438e3cc525f4c4e0b0"},"pid":"5d0f509f8e3cc525f4c4e0af","atname":"Maven","title":"maven使用学习","state":"1","description":"maven学习maven下载及配置；创建一个maven本地仓库(用于放maven依赖文件：外部依赖包，本地依赖包)；在maven安装包路径下config\\settings.xml中配置本地仓库路径；\n配置maven环境变量；mvn -v 查看maven配置情况；IDEA设置中配置maven仓库配置；maven安装路径配置setting.xml 会自动识别到本地仓库；","keywords":[],"rawText":"## maven学习\n### maven下载及配置\n1. apache官网下载最新maven zip包\n2. 创建一个maven本地仓库(用于放maven依赖文件：外部依赖包，本地依赖包)\n3. 在maven安装包路径下config\\settings.xml中配置本地仓库路径\n4. 配置maven环境变量\n5. mvn -v 查看maven配置情况\n6. IDEA设置中配置maven仓库\n7. 配置maven安装路径 \n8. 配置setting.xml 会自动识别到本地仓库\n\n### 统一配置jdk\n- 可在maven setting.xml中通过profile标签配置统一的jdk\n- 也可在项目pom中 通过profile标签配置项目统一的jdk\n\n### maven项目结构分析\nmaven遵循约定大于配置原则创建maven项目会自动创建pom.xml,src下创建main和test路径，下面分别创建java路径。\n- main\\java下放代码\n- main\\resources下放资源文件\n- test\\java下方测试代码\n- test\\resources下方测试资源文件\n\npom.xml 即项目对象模型，是maven的设计原则。里面配置项目信息及依赖\n\n### maven简单命令\n```java\n在maven项目中运行mvn命令须在pom.xml目录下运行\n\nmvn compile 编译项目(会去本地仓库找寻依赖包，没有则取中央仓库下载；编译后的class文件生成在target路径中)\n\nmvn test 编译测试代码\n\nmvn package 达成jar/war包\n\nmvn install 将该开发模块 放入本地仓库\n\nmvn clean 删除target编译目录\n```\n### maven依赖说明\n**分析pom.xml文件**\n\n**pom中gav三个标签用于唯一标识**，可以理解为一个坐标。外层的gav指定了该项目打包后的位置及名称依赖包放在dependencies标签下，每个依赖用dependency标签包裹.\ndependency标签中的scope标签指明依赖包适用范围\n```java\ncompile 编译，测试，运行都会用\ntest 测试用\nprovided 编译、测试用，运行不会用\nexclusions标签排除依赖包。在exclusions中增加exclusion标签排除指定依赖包\n```\n\n### 依赖传递、继承、聚合\n**只有compile方式依赖才具有传递性**。如：A依赖B，B依赖C，则通过maven使得A能获得C方式的前提是B通过compile方式依赖C\n\n最短路径优先原则。如A直接依赖C1.0和A通过依赖B获得C1.2则，最终A获得的是C1.0\n\n路径长度相同:\n- 同一个pom中，后申明的覆盖先申明的\n- 不同pom中，先申明的优先。后申明的无效\n\n**继承和聚合**\n**继承是为了统一依赖包版本，消除重复依赖**\n父模块必须是pom方式打包\n父模块pom.xml中用dependencyManagement管理依赖模块\n子模块中用parent标签指明父模块的gav.并通过relativePath申明父模块中pom.xml路径\n**聚合为了快速构建项目，即依赖的项目不再需要手动install到本地仓库。**\n写聚合的模块必须是pom方式打包\n用modlues嵌套module标签指定聚合的模块：\n```java\n <modules>\n      <module>../Hello</module>\n      <module>../HelloFriend</module>\n      <module>../MakeFriends</module>\n </modules>\n\n```\n","renderText":"<h2><a id=\"maven_0\"></a>maven学习</h2>\n<h3><a id=\"maven_1\"></a>maven下载及配置</h3>\n<ol>\n<li>apache官网下载最新maven zip包</li>\n<li>创建一个maven本地仓库(用于放maven依赖文件：外部依赖包，本地依赖包)</li>\n<li>在maven安装包路径下config\\settings.xml中配置本地仓库路径</li>\n<li>配置maven环境变量</li>\n<li>mvn -v 查看maven配置情况</li>\n<li>IDEA设置中配置maven仓库</li>\n<li>配置maven安装路径</li>\n<li>配置setting.xml 会自动识别到本地仓库</li>\n</ol>\n<h3><a id=\"jdk_11\"></a>统一配置jdk</h3>\n<ul>\n<li>可在maven setting.xml中通过profile标签配置统一的jdk</li>\n<li>也可在项目pom中 通过profile标签配置项目统一的jdk</li>\n</ul>\n<h3><a id=\"maven_15\"></a>maven项目结构分析</h3>\n<p>maven遵循约定大于配置原则创建maven项目会自动创建pom.xml,src下创建main和test路径，下面分别创建java路径。</p>\n<ul>\n<li>main\\java下放代码</li>\n<li>main\\resources下放资源文件</li>\n<li>test\\java下方测试代码</li>\n<li>test\\resources下方测试资源文件</li>\n</ul>\n<p>pom.xml 即项目对象模型，是maven的设计原则。里面配置项目信息及依赖</p>\n<h3><a id=\"maven_24\"></a>maven简单命令</h3>\n<pre><div class=\"hljs\"><code class=\"lang-java\">在maven项目中运行mvn命令须在pom.xml目录下运行\n\nmvn compile 编译项目(会去本地仓库找寻依赖包，没有则取中央仓库下载；编译后的<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span>文件生成在<span class=\"hljs-title\">target</span>路径中)\n\n<span class=\"hljs-title\">mvn</span> <span class=\"hljs-title\">test</span> 编译测试代码\n\n<span class=\"hljs-title\">mvn</span> <span class=\"hljs-title\">package</span> 达成<span class=\"hljs-title\">jar</span>/<span class=\"hljs-title\">war</span>包\n\n<span class=\"hljs-title\">mvn</span> <span class=\"hljs-title\">install</span> 将该开发模块 放入本地仓库\n\n<span class=\"hljs-title\">mvn</span> <span class=\"hljs-title\">clean</span> 删除<span class=\"hljs-title\">target</span>编译目录\n</span></code></div></pre>\n<h3><a id=\"maven_38\"></a>maven依赖说明</h3>\n<p><strong>分析pom.xml文件</strong></p>\n<p><strong>pom中gav三个标签用于唯一标识</strong>，可以理解为一个坐标。外层的gav指定了该项目打包后的位置及名称依赖包放在dependencies标签下，每个依赖用dependency标签包裹.<br />\ndependency标签中的scope标签指明依赖包适用范围</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\">compile 编译，测试，运行都会用\ntest 测试用\nprovided 编译、测试用，运行不会用\nexclusions标签排除依赖包。在exclusions中增加exclusion标签排除指定依赖包\n</code></div></pre>\n<h3><a id=\"_50\"></a>依赖传递、继承、聚合</h3>\n<p><strong>只有compile方式依赖才具有传递性</strong>。如：A依赖B，B依赖C，则通过maven使得A能获得C方式的前提是B通过compile方式依赖C</p>\n<p>最短路径优先原则。如A直接依赖C1.0和A通过依赖B获得C1.2则，最终A获得的是C1.0</p>\n<p>路径长度相同:</p>\n<ul>\n<li>同一个pom中，后申明的覆盖先申明的</li>\n<li>不同pom中，先申明的优先。后申明的无效</li>\n</ul>\n<p><strong>继承和聚合</strong><br />\n<strong>继承是为了统一依赖包版本，消除重复依赖</strong><br />\n父模块必须是pom方式打包<br />\n父模块pom.xml中用dependencyManagement管理依赖模块<br />\n子模块中用parent标签指明父模块的gav.并通过relativePath申明父模块中pom.xml路径<br />\n<strong>聚合为了快速构建项目，即依赖的项目不再需要手动install到本地仓库。</strong><br />\n写聚合的模块必须是pom方式打包<br />\n用modlues嵌套module标签指定聚合的模块：</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"> &lt;modules&gt;\n      &lt;<span class=\"hljs-keyword\">module</span>&gt;../Hello&lt;/<span class=\"hljs-keyword\">module</span>&gt;\n      &lt;<span class=\"hljs-keyword\">module</span>&gt;../HelloFriend&lt;/<span class=\"hljs-keyword\">module</span>&gt;\n      &lt;<span class=\"hljs-keyword\">module</span>&gt;../MakeFriends&lt;/<span class=\"hljs-keyword\">module</span>&gt;\n &lt;/modules&gt;\n\n</code></div></pre>\n","lock":"0","tags":[{"name":"Maven","icon":""}],"createId":{"$numberInt":"17"},"updateTime":"2019-06-24 23:59","createTime":"2019-03-15"}
{"_id":{"$oid":"5d0f549a8e3cc525f4c4e0b2"},"pid":"5d0f53be8e3cc525f4c4e0b1","atname":"Chrome","title":"chrome调试工具使用","state":"1","description":"chrome调试工具使用\nCtrl + Shift + J 打开开发工具并**聚焦console**台\nCtrl + Shift + C 打开开发工具并**聚焦html代码**\nCtrl + Shift + I  打开开发工具。(默认打开的是js文件)","keywords":[],"rawText":"\n## 使用chrome调试工具\n[参考链接](http://wiki.jikexueyuan.com/project/chrome-devtools/development-workflow.html)\n### 打开方式\n```js\nCtrl + Shift + J 打开开发工具并聚焦console台\nCtrl + Shift + C 打开开发工具并聚焦html代码\nCtrl + Shift + I  打开开发工具。(默认打开的是js文件)\n```\n\n\n### 常用面板功能\n- Elements面板\n```js\n实时编辑dom节点\n在Style窗格修改Style\n在Computed窗格查看元素的框模型参数\n同时可经过设置让chrome这些修改保存到本地\n```\n\n\n\t\n- Application面板\n```js\n\n可找到LocalStorage查看修改添加存储的键值对\n同理可修改查看修改数据库，缓存等\n```\n\n- NetWork面板\n```js\n可查看请求的耗时、性能等\n可查看HTTP请求响应和cookie等\nCtrl  + E 停止记录/记录 切换\n通过filter过滤，各种关键字过滤，domain,larger-than,is等等\n可选中对应的请求，右键选择复制想要的内容，比如copy response\nPreserve log勾选，可以保留跳转后之前页面的请求记录\n```\n\n- Console面板\n```js\n\nCtrl + Shift + J是在非开发模式，快速打开控制台的方式\nCtrl + L 清空控制台信息\nconsole.log();\nconsole.assets();\nconsole.dir();\n$_  返回最近评估的表达式的值。\n`$0 - $4` 返回 在 Elements 面板中检查的最后五个 DOM 元素\ntable(data) 把data用表格形式显示\nShift + Enter 进入多行输入模式，比如写测试fucntion，排版更好些\n```\n\n### 其他\n\n```js\nCtrl + o  快速搜索文件.   支持模糊匹配，如输入文件名单词的首字母\nCtrl + F 搜索打开文件中的某段内容\n```\n\n### 断点调试\n\n```js\n对JavaScript代码进行断点调试是发现处理问题的方式。\n选择断点方式，行号前空白处单击。\n条件断点:\nEdit Breakpoint, 输入条件表达式，当表达式为true时，代码停到断点处\n查看断点信息,右侧边栏以下信息:\nWatch Expression\nCall Stack\nScope Variable\nXHR Breakpoints 可以添加URL包含的字符，对指定的请求打断点\nEvent Listener Breakpoints 可以设置click，mouse相关各种事件断点\n```\n\n##### 移动设备模拟\n```js\n不同设备分辨率下看移动项目的效果\n安卓设备远程调试:\nchrome://inspect \n\n```\n\n##### 性能分析内存分析..\n","renderText":"<h2><a id=\"chrome_1\"></a>使用chrome调试工具</h2>\n<p><a href=\"http://wiki.jikexueyuan.com/project/chrome-devtools/development-workflow.html\" target=\"_blank\">参考链接</a></p>\n<h3><a id=\"_3\"></a>打开方式</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">Ctrl + Shift + J 打开开发工具并聚焦<span class=\"hljs-built_in\">console</span>台\nCtrl + Shift + C 打开开发工具并聚焦html代码\nCtrl + Shift + I  打开开发工具。(默认打开的是js文件)\n</code></div></pre>\n<h3><a id=\"_11\"></a>常用面板功能</h3>\n<ul>\n<li>Elements面板</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">实时编辑dom节点\n在Style窗格修改Style\n在Computed窗格查看元素的框模型参数\n同时可经过设置让chrome这些修改保存到本地\n</code></div></pre>\n<ul>\n<li>Application面板</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\n可找到LocalStorage查看修改添加存储的键值对\n同理可修改查看修改数据库，缓存等\n</code></div></pre>\n<ul>\n<li>NetWork面板</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">可查看请求的耗时、性能等\n可查看HTTP请求响应和cookie等\nCtrl  + E 停止记录/记录 切换\n通过filter过滤，各种关键字过滤，domain,larger-than,is等等\n可选中对应的请求，右键选择复制想要的内容，比如copy response\nPreserve log勾选，可以保留跳转后之前页面的请求记录\n</code></div></pre>\n<ul>\n<li>Console面板</li>\n</ul>\n<pre><div class=\"hljs\"><code class=\"lang-js\">\nCtrl + Shift + J是在非开发模式，快速打开控制台的方式\nCtrl + L 清空控制台信息\n<span class=\"hljs-built_in\">console</span>.log();\n<span class=\"hljs-built_in\">console</span>.assets();\n<span class=\"hljs-built_in\">console</span>.dir();\n$_  返回最近评估的表达式的值。\n<span class=\"hljs-string\">`$0 - $4`</span> 返回 在 Elements 面板中检查的最后五个 DOM 元素\ntable(data) 把data用表格形式显示\nShift + Enter 进入多行输入模式，比如写测试fucntion，排版更好些\n</code></div></pre>\n<h3><a id=\"_53\"></a>其他</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">Ctrl + o  快速搜索文件.   支持模糊匹配，如输入文件名单词的首字母\nCtrl + F 搜索打开文件中的某段内容\n</code></div></pre>\n<h3><a id=\"_60\"></a>断点调试</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">对JavaScript代码进行断点调试是发现处理问题的方式。\n选择断点方式，行号前空白处单击。\n条件断点:\nEdit Breakpoint, 输入条件表达式，当表达式为<span class=\"hljs-literal\">true</span>时，代码停到断点处\n查看断点信息,右侧边栏以下信息:\nWatch Expression\nCall Stack\nScope Variable\nXHR Breakpoints 可以添加URL包含的字符，对指定的请求打断点\nEvent Listener Breakpoints 可以设置click，mouse相关各种事件断点\n</code></div></pre>\n<h5><a id=\"_75\"></a>移动设备模拟</h5>\n<pre><div class=\"hljs\"><code class=\"lang-js\">不同设备分辨率下看移动项目的效果\n安卓设备远程调试:\nchrome:<span class=\"hljs-comment\">//inspect </span>\n\n</code></div></pre>\n<h5><a id=\"_83\"></a>性能分析内存分析…</h5>\n","lock":"0","tags":[{"name":"Chrome","icon":"localhost:3005\\tagIcon\\1561390902356.png"}],"createId":{"$numberInt":"18"},"updateTime":"2019-06-24 23:41","createTime":"2019-01-09"}
{"_id":{"$oid":"5d0f56138e3cc525f4c4e0b3"},"pid":"5d0f47fa8e3cc525f4c4e0a7","atname":"MongoDB","title":"一次数据库\"丢失问题”排查","state":"1","description":"开机重启后mongodb创建的数据库找不到了，原因是：安装时制定service的data路径和直接mongod –dbpath 制定的路径不是同一个路径 经测试，在两种方式，都启动服务的同时，命令行mongo连接数据库，走的是系统启动的那个。 所以出现了数据库”丢失”的情况。","keywords":[],"rawText":"## 一次数据库”丢失问题”排查\n### 问题重现：\n```js\n安装mongo 4.x版本\n\n使用mongod –dbpath xxxpathname\n\n使用mongo连接数据库\n\n创建了数据库及表\n```\n\n开机重启后：\n```js\n使用mongod –dbpath xxxpathname\n\n使用mongo连接数据库\n\nshow dbs发现没有之前创建的数据库了\n```\n### 原因：\n经排查，发现，在mongo 4.x安装的时候，勾选了Mongo service并制定了data存储路径，即**开机时会启动mongo service服务，直接命令行mongo即可连接数据库**。 \n不难发现问题原因就是： \n安装时制定service的data路径和直接mongod –dbpath 制定的路径不是同一个路径 \n经测试，在两种方式，都启动服务的同时，命令行mongo连接数据库，走的是系统启动的那个。 \n所以出现了数据库”丢失”的情况。\n\n### 解决方案： \n方案一： \n```js\n修改系统启动服务的data路径为我们自己dbpath常使用的路径. 在系统services中找到mongo service查看属性，找到服务启动文件为： \nC:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongod.cfg \n修改mongod.cfg中dbPath路径即可 \n```\n\n方案二： \n```js\n关掉系统启动mongo service服务，每次手动mongod –dbpath开启mongo服务即可\n```","renderText":"<h2><a id=\"_0\"></a>一次数据库”丢失问题”排查</h2>\n<h3><a id=\"_1\"></a>问题重现：</h3>\n<pre><div class=\"hljs\"><code class=\"lang-js\">安装mongo <span class=\"hljs-number\">4.</span>x版本\n\n使用mongod –dbpath xxxpathname\n\n使用mongo连接数据库\n\n创建了数据库及表\n</code></div></pre>\n<p>开机重启后：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">使用mongod –dbpath xxxpathname\n\n使用mongo连接数据库\n\nshow dbs发现没有之前创建的数据库了\n</code></div></pre>\n<h3><a id=\"_20\"></a>原因：</h3>\n<p>经排查，发现，在mongo 4.x安装的时候，勾选了Mongo service并制定了data存储路径，即<strong>开机时会启动mongo service服务，直接命令行mongo即可连接数据库</strong>。<br />\n不难发现问题原因就是：<br />\n安装时制定service的data路径和直接mongod –dbpath 制定的路径不是同一个路径<br />\n经测试，在两种方式，都启动服务的同时，命令行mongo连接数据库，走的是系统启动的那个。<br />\n所以出现了数据库”丢失”的情况。</p>\n<h3><a id=\"_27\"></a>解决方案：</h3>\n<p>方案一：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">修改系统启动服务的data路径为我们自己dbpath常使用的路径. 在系统services中找到mongo service查看属性，找到服务启动文件为： \nC:\\Program Files\\MongoDB\\Server\\<span class=\"hljs-number\">4.0</span>\\bin\\mongod.cfg \n修改mongod.cfg中dbPath路径即可 \n</code></div></pre>\n<p>方案二：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">关掉系统启动mongo service服务，每次手动mongod –dbpath开启mongo服务即可\n</code></div></pre>\n","lock":"1","tags":[{"name":"Mongo","icon":"localhost:3005\\tagIcon\\1561387325454.png"}],"createId":{"$numberInt":"19"},"updateTime":"2019-06-24 23:40","createTime":"2019-05-03"}
{"_id":{"$oid":"5d10ed79ef26242118c59a0b"},"pid":"5d025bf5fe135b3c80287144","atname":"测试","title":"android 文章test","state":"0","description":"android 文章test","keywords":[],"rawText":"#### android 文章test\nandroid 文章testandroid 文章testandroid 文章test","renderText":"<h4><a id=\"android_test_0\"></a>android 文章test</h4>\n<p>android 文章testandroid 文章testandroid 文章test</p>\n","lock":"0","tags":[{"name":"Android","icon":"localhost:3005\\tagIcon\\1561387400060.png"}],"createId":{"$numberInt":"20"},"updateTime":"","createTime":"2019-06-24"}
